---
import type { GetStaticPaths } from "astro";
import { getCollection } from "astro:content";
import { render } from "astro:content";
import DefaultPageLayout from "../../layouts/DefaultPageLayout.astro";
import { Icon } from "astro-icon/components";
import BaseCard from "../../components/BaseCard.astro";
import LinkOrText from "../../components/LinkOrText.astro";
import { getSubTools } from "../../utils/getSubTools";
import SubToolCard from "../../components/SubToolCard.astro";
import { getToolLinks } from "../../utils/getToolLinks";
import { groupBy, sortBy } from "es-toolkit";
import { getToolArticles } from "../../utils/relatedContent";
import { normalizeTrailingSlash } from "@reunmedia/astro-normalize-trailing-slash";
import TagCollection from "../../components/TagCollection.astro";
import DividedHorizontalToolList from "../../components/DividedHorizontalToolList.astro";

export const getStaticPaths = (async () => {
  const tools = await getCollection("tools");
  return tools.map((tool) => ({
    params: { id: tool.id },
    props: { tool },
  }));
}) satisfies GetStaticPaths;

const { tool } = Astro.props;
const { Content } = await render(tool);

interface InfoBoxListItem {
  icon?: string | null;
  name?: string;
  href?: string | null;
}

const infoBoxListItems: InfoBoxListItem[] = [...getToolLinks(tool.data.links)];

//#region Sub-tools
const subTools = sortBy(await getSubTools(tool), ["id"]);

const { storedAway, onTheShelf, ...otherSubTools } = groupBy(
  subTools,
  (x) => x.data.usageStatus,
);

const majorTools = sortBy(Object.values(otherSubTools).flat(), ["id"]);

const minorTools = sortBy(
  [...(onTheShelf ?? []), ...(storedAway ?? [])],
  ["id"],
);
//#endregion

//#region Articles
const relatedArticles = await getToolArticles(tool);
//#endregion
---

<DefaultPageLayout title={tool.data.title}>
  <div>
    <span class="prose-content">
      <h1>{tool.data.title}</h1>
    </span>
    <Icon
      class="mx-auto -mt-4 w-16 h-16"
      name={tool.data.icon ?? tool.data.defaultIcon}
    />

    <div class="flex gap-8 sm:gap-4 flex-col-reverse sm:flex-row mt-8">
      <div class="flex-2/3">
        <p class="mb-4">
          <em>Published: {tool.data.datePublished.toLocaleDateString()}</em>
          {
            tool.data.dateUpdated && (
              <em> | Updated: {tool.data.dateUpdated.toLocaleDateString()}</em>
            )
          }
        </p>
        <div class="prose-content">
          <Content />
        </div>
      </div>
      <div class="flex-1/3">
        <BaseCard>
          <h2 class="text-theme-primary text-lg font-display">Tool Info</h2>
          <TagCollection class="mt-4" tags={tool.data.tags} />
          <ul class="space-y-4 mt-4">
            {
              infoBoxListItems
                .filter((x) => x.name)
                .map((item) => {
                  return (
                    <li class="flex items-center gap-2">
                      <Icon name={item.icon} />
                      <LinkOrText
                        href={item.href}
                        aAttributes={{ class: "underline" }}
                      >
                        {item.name}
                      </LinkOrText>
                    </li>
                  );
                })
            }
          </ul>
          {
            relatedArticles.length > 0 && (
              <>
                <h2 class="text-theme-primary text-lg font-display mt-8">
                  Related Articles
                </h2>
                <ul class="space-y-4 mt-4">
                  {relatedArticles.map((article) => {
                    return (
                      <li>
                        <a
                          class="underline"
                          href={normalizeTrailingSlash(`/posts/${article.id}/`)}
                        >
                          {article.data.title}
                        </a>
                      </li>
                    );
                  })}
                </ul>
              </>
            )
          }
        </BaseCard>
      </div>
    </div>
    {
      subTools.length > 0 && (
        <>
          <h2 class="h2">Additional Tools for {tool.data.title}</h2>
          <ul class="space-y-8 mt-8">
            {majorTools.map((subTool) => (
              <SubToolCard tool={subTool} />
            ))}
          </ul>
          {minorTools.length > 0 && (
            <>
              {majorTools.length > 0 && (
                // Only show this heading if there are major tools before this
                // because it looks weird to have the two headings in a row.
                <h3 class="h3">I also sometimes use</h3>
              )}
              <DividedHorizontalToolList class="mt-8" tools={minorTools} />
            </>
          )}
        </>
      )
    }
  </div>
</DefaultPageLayout>
