---
import type { GetStaticPaths } from "astro";
import { getCollection } from "astro:content";
import { render } from "astro:content";
import DefaultPageLayout from "../../layouts/DefaultPageLayout.astro";
import { Icon } from "astro-icon/components";
import BaseCard from "../../components/BaseCard.astro";
import LinkOrText from "../../components/LinkOrText.astro";
import { format } from "date-fns";
import { getSubTools } from "../../utils/getSubTools";

export const getStaticPaths = (async () => {
  const tools = await getCollection("tools");
  return (
    tools
      // Filter to only generate pages for main tools, not sub-tools
      .filter((tool) => false === tool.id.includes("/"))
      .map((tool) => ({
        params: { id: tool.id },
        props: { tool },
      }))
  );
}) satisfies GetStaticPaths;

const { tool } = Astro.props;
const { Content } = await render(tool);

interface InfoBoxListItem {
  icon?: string;
  text?: string;
  link?: string;
}

const infoBoxListItems: InfoBoxListItem[] = [
  {
    icon: "heroicons:clock",
    text: `Published ${format(tool.data.datePublished, "yyyy-MM-dd")}`,
  },
  {
    icon: "heroicons:clock",
    text: tool.data.dateUpdated
      ? `Updated ${format(tool.data.dateUpdated, "yyyy-MM-dd")}`
      : "",
  },
  {
    icon: "simple-icons:github",
    text: tool.data.links.github ? "GitHub" : "",
    link: tool.data.links.github ?? undefined,
  },
  {
    icon: "mynaui/globe",
    text: tool.data.links.website ? "Website" : "",
    link: tool.data.links.website ?? undefined,
  },
];

const subTools = await getSubTools(tool);
---

<DefaultPageLayout title={tool.data.title}>
  <div>
    <span class="prose-content">
      <h1>{tool.data.title}</h1>
    </span>
    <Icon
      class="mx-auto -mt-4 w-16 h-16"
      name={tool.data.icon ?? tool.data.defaultIcon}
    />
    <p class="mb-4">
      <em>Published: {tool.data.datePublished.toLocaleDateString()}</em>
      {
        tool.data.dateUpdated && (
          <em> | Updated: {tool.data.dateUpdated.toLocaleDateString()}</em>
        )
      }
    </p>
    <div class="flex gap-4">
      <div class="flex-2/3 prose-content">
        <Content />
      </div>
      <div class="flex-1/3">
        <BaseCard>
          <ul class="space-y-4">
            {
              infoBoxListItems
                .filter((x) => x.text)
                .map((item) => {
                  return (
                    <li class="flex items-center gap-2">
                      <Icon name={item.icon} />
                      <LinkOrText
                        href={item.link}
                        aAttributes={{ class: "underline" }}
                      >
                        {item.text}
                      </LinkOrText>
                    </li>
                  );
                })
            }
          </ul>
        </BaseCard>
      </div>
    </div>
    {
      subTools && (
        <h2 class="h2">Additional Tools for {tool.data.title}</h2>
        <ul class="space-y-4 mt-4">
          {subTools.map((subTool) => (
            <li>{subTool.data.title}</li>
          ))}
        </ul>
      )
    }
  </div>
</DefaultPageLayout>
